# -*- coding: utf-8 -*-
""" Modified by Kyle R. Covington and Anup Parikh """
import os, sys, user, cPickle, time, redRLog
from PyQt4.QtCore import *
from PyQt4.QtGui import *
if sys.platform=="win32":
    import win32com.client
#print 'Importing redREnviron.py'
# import redRi18n
def _(a):
    return a
# _ = redRi18n.Coreget_()
def __getDirectoryNames():
    """Return a dictionary with Red-R directories."""
    try:
        redRDir = os.path.split(os.path.split(os.path.abspath(sys.argv[0]))[0])[0]
    except:
        redRLog.log(redRLog.REDRCORE, redRLog.ERROR, redRLog.formatException())
        pass

    canvasDir = os.path.join(redRDir, "canvas")
    canvasIconsDir = os.path.join(redRDir, "canvas",'icons')
    rpyDir = os.path.join(redRDir, "canvas",'rpy')
    RDir = os.path.join(os.path.split(redRDir)[0], "R", 'R-2.11.1')
    widgetDir = os.path.join(redRDir, "libraries")
    libraryDir = os.path.join(redRDir, "libraries")
    qtWidgetsDir = os.path.join(redRDir, "libraries",'base','qtWidgets')
    redRSignalsDir = os.path.join(redRDir, "libraries",'base','signalClasses')
    examplesDir = os.path.join(redRDir, "Examples")
    picsDir = os.path.join(widgetDir,'base', "icons")
    addOnsDir = os.path.join(redRDir, "add-ons")
    

    if not os.path.isdir(widgetDir) or not os.path.isdir(widgetDir):
        canvasDir = None
        widgetDir = None
    if not os.path.isdir(picsDir):
        picsDir = ""
    

    ## check that the settings directories are in place, this would be skipped over in the try
    try:
        if not os.path.isdir(os.path.join(os.environ['APPDATA'], 'red-r')):
            os.makedirs(os.path.join(os.environ['APPDATA'], 'red-r'))
        settingsDir = os.path.join(os.environ['APPDATA'],'red-r','settings')
    except:
        redRLog.log(redRLog.REDRCORE, redRLog.ERROR, redRLog.formatException())
        try:
            if not os.path.isdir(os.path.join(os.environ['HOME'], '.redr', 'red-r')):
                os.makedirs(os.path.join(os.environ['HOME'], '.redr', 'red-r'))
            settingsDir = os.path.join(os.environ['HOME'], '.redr', 'red-r','settings')
        except:
            redRLog.log(redRLog.REDRCORE, redRLog.ERROR, redRLog.formatException())
            print _('Error occured in setting the settingsDir')
    
    reportsDir = os.path.join(settingsDir, "RedRReports")
    logsDir = os.path.join(settingsDir, "RedRlogs")
    canvasSettingsDir = os.path.join(settingsDir, "RedRCanvas") 
    tempDirHolder = os.path.join(canvasSettingsDir, 'temp')
    widgetSettingsDir = os.path.join(settingsDir, "RedRWidgetSettings")
    downloadsDir = os.path.join(settingsDir, "downloads")
    logDB = os.path.join(canvasSettingsDir, "log.db")
    
    if sys.platform=="win32":
        objShell = win32com.client.Dispatch("WScript.Shell")
        documentsDir = os.path.join(objShell.SpecialFolders("MyDocuments"),'Red-R')
        # print documentsDir
    else:
        documentsDir = os.path.join(os.path.expanduser('~'), 'Red-R')
        
    templatesDir = os.path.join(documentsDir, 'Templates')    
    schemaDir = os.path.join(documentsDir, 'Schemas')
    

    for dname in [documentsDir,templatesDir,schemaDir, settingsDir, widgetSettingsDir, canvasSettingsDir, reportsDir,logsDir,
    downloadsDir , tempDirHolder]:
        if dname <> None and not os.path.isdir(dname):
            try: os.makedirs(dname)        
            # Vista has roaming profiles that will say that this folder does not exist and will then fail to create it, because it exists...
            except: pass
    # print _('create temp')
    #tempDir = setTempDir(tempDirHolder)
    # print tempDir
        
    return dict([(name, vars()[name]) for name in ['rpyDir',"tempDirHolder", "templatesDir","schemaDir", "documentsDir", 
    "redRDir", "canvasDir","canvasIconsDir", "libraryDir", "RDir", 'qtWidgetsDir', 'redRSignalsDir', "widgetDir", "examplesDir", 
    "picsDir", "addOnsDir", "reportsDir","logsDir",
    "settingsDir", "downloadsDir",'logDB', "widgetSettingsDir",  "canvasSettingsDir"]])
def checkInternetConnection():
    import urllib
    try:
        urllib.urlopen('http://www.google.com/')
        return True
    except:
        redRLog.log(redRLog.REDRCORE, redRLog.ERROR, redRLog.formatException())
        return False
def samepath(path1, path2):
    return os.path.normcase(os.path.normpath(path1)) == os.path.normcase(os.path.normpath(path2))
def setTempDir(temp):
    # print _('setting temp dir') + unicode(time.time())
    
    tempDir = os.path.join(directoryNames['tempDirHolder'], temp) 
    os.mkdir(tempDir)
    directoryNames['tempDir'] = tempDir
    return tempDir
    # if not os.path.isdir():
        # os.mkdir(os.path.join(canvasSettingsDir, 'temp', unicode('temp'+unicode(dirNumber))))
        # return os.path.join(canvasSettingsDir, 'temp', unicode('temp'+unicode(dirNumber)))
    # else:
        # return setTempDir(canvasSettingsDir, int(dirNumber + 1))

        
# Loads settings from the canvas's .ini file
def loadSettings():
    # print '#################loadSettings'
    settings = {}
    filename = os.path.join(directoryNames['canvasSettingsDir'], "orngCanvas.ini")
    if os.path.exists(filename):
        try:
            settings = cPickle.load(open(filename, "rb"))
        except:
            redRLog.log(redRLog.REDRCORE, redRLog.ERROR, redRLog.formatException())
            pass

    settings['id'] = unicode(time.time())
    setTempDir('temp_'+ settings['id'])

    settings.setdefault("widgetListType", 3)
    settings.setdefault("iconSize", "40 x 40")
    settings.setdefault("toolbarIconSize", 1)
    settings.setdefault("toolboxWidth", 200)
    settings.setdefault('schemeIconSize', 2)
    settings.setdefault("snapToGrid", 1)
    settings.setdefault('helpMode', True)
    settings.setdefault("minSeverity", 5)
    settings.setdefault("saveWidgetsPosition", 1)
    # settings.setdefault("widgetSelectedColor", (0, 255, 0))
    # settings.setdefault("widgetActiveColor", (0,0,255))
    # settings.setdefault("lineColor", (0,255,0))
    
    settings.setdefault("exceptionLevel", 5)
    settings.setdefault("WidgetTabs", [])

    settings.setdefault("saveSchemaDir", directoryNames['documentsDir'])
    settings.setdefault("saveApplicationDir", directoryNames['canvasSettingsDir'])
    settings.setdefault("showSignalNames", 1)
    
    settings.setdefault("canvasWidth", 700)
    settings.setdefault("canvasHeight", 600)
    settings.setdefault('dockState', {'notesBox':True, 'outputBox':True, 'widgetBox':True})
        
    settings.setdefault("useDefaultPalette", 0)

    settings.setdefault('CRANrepos','http://cran.r-project.org')
    settings.setdefault('red-RPackagesUpdated',0)
    settings.setdefault('checkedForUpdates',0)
    settings.setdefault('keepForXDays', 7)
    ############################
    #Dubug and output settings##
    ############################

    settings.setdefault("dontAskBeforeClose", 0)
    
    settings.setdefault("writeLogFile", 1)
    settings["logFile"] = os.path.join(directoryNames['logsDir'], "outputLog_%s.html" % settings['id'])
    
    settings.setdefault("uploadError", 0)
    settings.setdefault("askToUploadError", 0)
    
    settings.setdefault("focusOnCatchException", 1)
    settings.setdefault("focusOnCatchOutput" , 0)
    settings.setdefault("printOutputInStatusBar", 0)
    settings.setdefault("printExceptionInStatusBar", 0)
    settings.setdefault("outputVerbosity", 3)
    settings.setdefault("displayTraceback", 0)
    
    settings.setdefault("ocShow", 1)
    settings.setdefault("owShow", 0)
    settings.setdefault("ocInfo", 1)
    settings.setdefault("owInfo", 1)
    settings.setdefault("ocWarning", 1)
    settings.setdefault("owWarning", 1)
    settings.setdefault("ocError", 1)
    settings.setdefault("owError", 1)
    
    settings.setdefault("synchronizeHelp", 1)
    settings.setdefault("firstLoad", 1)
    settings.setdefault("email", '')
    settings.setdefault('canContact', 1)
    settings.setdefault('language', ['latin', 'English'])
    
    return settings
    
# Saves settings to this widget's .ini file
def saveSettings():
    #print 'red-r canvas saveSettings'
    filename = os.path.join(directoryNames['canvasSettingsDir'], "orngCanvas.ini")
    file=open(filename, "wb")
    if settings["widgetListType"] == 1:        # tree view
        settings["treeItemsOpenness"] = dict([(key, tabs.tabDict[key].isExpanded()) for key in tabs.tabDict.keys()])
    cPickle.dump(settings, file,2)
    file.close()
def getVersion():
    version = {}
    f = open(os.path.join(directoryNames["redRDir"],'version.txt'), 'r')
    file = f.readlines()
    f.close()
    import re
    for i in file:
        m = re.search('!define\s(\S+)\s"(.*)"',i)
        version[m.group(1)] = m.group(2)
    return version
            
def addOrangeDirectoriesToPath(directoryNames):
    """Add orange directory paths to Python path."""
    pathsToAdd = [directoryNames['redRDir']]
    pathsToAdd = [directoryNames['rpyDir']]
    pathsToAdd.append(directoryNames['canvasDir'])
    # pathsToAdd.append(directoryNames['libraryDir'])

    # if directoryNames['libraryDir'] <> None and os.path.isdir(directoryNames['libraryDir']):
        # pathsToAdd.extend([os.path.join(directoryNames['libraryDir'], x) for x in os.listdir(directoryNames['libraryDir']) if os.path.isdir(os.path.join(directoryNames['libraryDir'], x))])
        # pathsToAdd.extend([os.path.join(directoryNames['libraryDir'], x,'widgets') for x in os.listdir(directoryNames['libraryDir']) if os.path.isdir(os.path.join(directoryNames['libraryDir'], x))])
        # pathsToAdd.extend([os.path.join(directoryNames['libraryDir'], x,'qtWidgets') for x in os.listdir(directoryNames['libraryDir']) if os.path.isdir(os.path.join(directoryNames['libraryDir'], x))])
        # pathsToAdd.extend([os.path.join(directoryNames['libraryDir'], x,'signalClasses') for x in os.listdir(directoryNames['libraryDir']) if os.path.isdir(os.path.join(directoryNames['libraryDir'], x))])
        
    for path in pathsToAdd:
        if os.path.isdir(path) and not any([samepath(path, x) for x in sys.path]):
            sys.path.insert(0,path)
print __name__
if __name__ =='redREnviron':
    # print '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@', unicode(time.time())
    directoryNames = __getDirectoryNames()
    addOrangeDirectoriesToPath(directoryNames)
    version = getVersion()
    settings = loadSettings()
    
    
